'''
一维数据
由对等关系的有序或无序数据构成，采用线性方式组织
对应列表，数组和集合等概念


高维数据
仅利用最基本的二元关系展示数据间的复杂结构
{
    "firstName":"Tian",                     #键值对
    "lastName" :"Song",
    "address"  :{
                    "stressAddr":"中关村南大街5号"，
                    "city"      :"北京市",
                    "zipcode"   :"100081"
    },
    "professional":["Computer Networking","Security"]    
}


数据的操作周期
存储   <->    表示   <->   操作
存储格式     数据类型     操作方式


一维数据的表示
如果数据间有序：使用列表表示类型
ls = [3.1398,3.1349,3.1376]
列表类型可以表达一维有序数据
for 循环可以遍历数据，进而对每个数据进行处理

如果数据间无序：使用集合类型
st = {3.1398,3.1349,3.1376}
集合类型可以表达一维无序数据
for循环可以遍历数据，进而对每个数据进行处理

一维数据的存储
存储方式一：空格分隔
使用一个或多个空格分隔进行存储，不换行
缺点：数据中不能存在空格

存储方式二：逗号分隔
使用英文半角逗号分隔数据进行存储，不换行
缺点：数据中不能有英文逗号

存储方式三：其他方式
使用其他符号或符号组合分隔，建议采用特殊符号
缺点：需要根据数据特点定义，通用性差

将存储的数据读入程序
将程序表示的数据写入文件

从空格分隔的文件读入数据
txt = open(fname).read()
ls = txt.split()
f.close()

从特殊符号分隔的文件中读入数据
txt = open(fname).read()
ls = txt.split("$")
f.close()

ls = ['中国','美国','日本']
f = open(fname,'w')
f.write(' '.join(ls))
f.close()

ls = ['中国','美国','日本']
f = open(fname,'w')
f.write('$'.jkin(ls))
f.close()


'''
